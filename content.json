[{"title":"Android 7.0 FileProvider","date":"2017-05-03T02:26:34.000Z","path":"2017/05/03/android-file-provider/","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Android N也已经发布了将近一年了，各大手机厂商陆陆续续也开始更新N了，刚好最近工作中又遇到了需要拍照和选取本地图片的功能，之前写的东西在同事新买的手机上完全不好使，没有办法，也就借机研究了下7.0上的适配问题。 一、问题的发现&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;虽然很早就知道Android在7.0版本后对文件共享方面有所修改，但一直也没有进行深入的研究，刚好最近自己的产品在同事7.0的手机上拍照和图片选取都有问题。拿过来打出log一看，发现一直报的问题是文件找不到和FileUriExposedException的错误。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么为什么会出现这类问题呢，Android7.0为了提高私有文件的安全性，启用了一些新的策略机制，使得file://uri类型的文件不能被访问，因此如果还采用以前的文件机制，将会报FileURIExposedException错误。 解决方法&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对此类问题，就需要通过FileProvider来解决了。本文主要来通过调用相机和选取本地图片及裁剪在7.0上的适配，顺便来介绍FileProvider的使用。官方链接：https://developer.android.com/reference/android/support/v4/content/FileProvider.html 二、FileProvider的使用1、 在Androidmanifest中声明FileProvider 1234567891011121314&lt;manifest&gt; ... &lt;application&gt; ... &lt;provider android:name=\"android.support.v4.content.FileProvider\" android:authorities=\"com.mydomain.fileprovider\" android:exported=\"false\" android:grantUriPermissions=\"true\"&gt; ... &lt;/provider&gt; ... &lt;/application&gt;&lt;/manifest&gt; name:可以使用系统提供的android.support.v4.content.FileProvider，或者使用自己定义的类的路径。 authorities:所属者，此处无过多限制，最好使用当前包名，或者相关名称即可。在FileProvider使用的过程中会用到。 exported:是否公有（也就是外部能否访问）。 grantUriPermissions:设置为true，你才有权操作文件 2、指定可用文件 FileProvider只能针对预先声明的目录文件生成URI，需要在res/xml建立对应路径文件，并添加paths节点。必须包含一个或者多个如下节点：12345* &lt;files-path name=\"name\" path=\"path\" /&gt; 对应Context.getFilesDir()下的路径* &lt;cache-path name=\"name\" path=\"path\" /&gt; 对应getCacheDir()下的路径* &lt;external-path name=\"name\" path=\"path\" /&gt; 对应Environment.getExternalStorageDirectory()下的路径* &lt;external-files-path name=\"name\" path=\"path\" /&gt; 对应Context.getExternalFilesDir(String) Context.getExternalFilesDir(null)下的路径* &lt;external-cache-path name=\"name\" path=\"path\" /&gt; 对应Context.getExternalCacheDir()下的路径 属性：name=”name” URI路径。为了提高安全性，name用来隐藏你共享的子目录的名称。 属性：path=”path” 分享对应的子目录的名称。 添加完成后，为声明的FileProvider添加属性 123456789&lt;provider android:name=\"android.support.v4.content.FileProvider\" android:authorities=\"com.mydomain.fileprovider\" android:exported=\"false\" android:grantUriPermissions=\"true\"&gt; &lt;meta-data android:name=\"android.support.FILE_PROVIDER_PATHS\" android:resource=\"@xml/file_paths\" /&gt;&lt;/provider&gt; 3、生成对应文件路径的URI 为了在不同的APP之间共享文件，我们需要针对文件生成一个URI，可以通过getUriForFile()来实现。123File imagePath = new File(Context.getFilesDir(), \"images\");File newFile = new File(imagePath, \"default_image.jpg\");Uri contentUri = getUriForFile(getContext(), \"com.mydomain.fileprovider\", newFile); 4、给生成的URI赋予临时权限 为了使URI访问不受限制，我们需要针对URI赋予临时权限，否则还会报错，方法如下12intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION); 官方文档给出的是setFlags()，不过个人建议使用addFlags()，内容包含FLAG_GRANT_READ_URI_PERMISSION（读）或者FLAG_GRANT_WRITE_URI_PERMISSION（写）。 5、完成为另一个APP一共URI 三、拍照保存URI生成方法 12345678910//当然为了适应所有版本，我们做出如下修改public static Uri getUriForFile(Context context, File file) &#123; Uri uri; if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) &#123; uri = FileProvider.getUriForFile(context.getApplicationContext(), \"com.mydomain.fileprovider\", file); &#125; else &#123; uri = Uri.fromFile(file); &#125; return uri;&#125; 相机调取123456789101112131415/** * 拍照 * * @param outputFileUri //照片保存路径 * @param requestCode * @param activity */public static void takePhoto(File outputFileUri, int requestCode, Activity activity) &#123; if (activity == null) &#123; return; &#125; Intent getImageByCamera = new Intent(\"android.media.action.IMAGE_CAPTURE\") .putExtra(MediaStore.EXTRA_OUTPUT, getUriForFile(activity, outputFileUri)); activity.startActivityForResult(getImageByCamera, requestCode);//拍照&#125; 图片裁剪 123456789101112131415161718192021/** * 裁剪图片 * * @param orgFile //文件原路径 * @param cropImage //裁剪保存路径 * @param requestCode * @param activity */public static void cropImage(File orgFile, File cropImage, int requestCode, Activity activity) &#123; Intent intent = new Intent(\"com.android.camera.action.CROP\"); intent.setDataAndType(getUriForFile(activity, orgFile), \"image/*\"); intent.putExtra(\"crop\", \"true\"); intent.putExtra(\"aspectX\", 1); intent.putExtra(\"aspectY\", 1); intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(cropImage)); intent.putExtra(\"return-data\", false); intent.putExtra(\"outputFormat\", Bitmap.CompressFormat.JPEG.toString()); //设置权限 intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION); activity.startActivityForResult(intent, requestCode);&#125;","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Android动态权限管理","date":"2017-05-02T09:17:40.000Z","path":"2017/05/02/android-permission-6/","text":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;苦逼的加班生活终于要告一段落了，可以闲下来做一下最近工作中遇到的一些问题和相对应的解决方案。此篇文章主要用来记录Android6.0的权限管理。 权限介绍&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Android从6.0(API23)之后开始出现动态权限的管理（Run），虽然对用户来说是个不错的安全体验（控制客户端对系统隐私信息的访问），却加大了我们程序员的工作量，新的权限获取方式除了和之前一样需要在AndroidMainfest文件中静态申请外，还需要在使用的地方动态的去先用户请求授权。当然这些权限也可以再系统设置的应用管理处手动的打开和关闭。当然，并不是所有的权限都需要动态的获取，安卓系统权限分为两类，正常权限和危险权限。 正常权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正常权限不会给用户的隐私带来风险，直接在AndroidMainfest中静态申请即可（例如网络权限）,安装时系统会自动授权。这类权限包括： android.permission.ACCESS_LOCATION_EXTRA_COMMANDS android.permission.ACCESS_NETWORK_STATE android.permission.ACCESS_NOTIFICATION_POLICY android.permission.ACCESS_WIFI_STATE android.permission.ACCESS_WIMAX_STATE android.permission.BLUETOOTH android.permission.BLUETOOTH_ADMIN android.permission.BROADCAST_STICKY android.permission.CHANGE_NETWORK_STATE android.permission.CHANGE_WIFI_MULTICAST_STATE android.permission.CHANGE_WIFI_STATE android.permission.CHANGE_WIMAX_STATE android.permission.DISABLE_KEYGUARD android.permission.EXPAND_STATUS_BAR android.permission.FLASHLIGHT android.permission.GET_ACCOUNTS android.permission.GET_PACKAGE_SIZE android.permission.INTERNET android.permission.KILL_BACKGROUND_PROCESSES android.permission.MODIFY_AUDIO_SETTINGS android.permission.NFC android.permission.READ_SYNC_SETTINGS android.permission.READ_SYNC_STATS android.permission.RECEIVE_BOOT_COMPLETED android.permission.REORDER_TASKS android.permission.REQUEST_INSTALL_PACKAGES android.permission.SET_TIME_ZONE android.permission.SET_WALLPAPER android.permission.SET_WALLPAPER_HINTS android.permission.SUBSCRIBED_FEEDS_READ android.permission.TRANSMIT_IR android.permission.USE_FINGERPRINT android.permission.VIBRATE android.permission.WAKE_LOCK android.permission.WRITE_SYNC_SETTINGS com.android.alarm.permission.SET_ALARM com.android.launcher.permission.INSTALL_SHORTCUT com.android.launcher.permission.UNINSTALL_SHORTCUT 危险权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;危险权限会授予应用机密数据的权限，如果在应用运行时需要申请危险权限，则必须用户明确统一使用这些权限后才能进行先关操作。例如：能够读取用户的联系人属于危险权限。如果应用声明其需要危险权限，则用户必须明确明确向用户授予其权限。同一权限组下的权限，用户只要同意其中一种，同组其他权限也相应获取到。 权限组 权限 CALENDAR READ_CALENDAR WRITE_CALENDAR CAMERA CAMERA CONTACTS READ_CONTACTS WRITE_CONTACTS GET_ACCOUNTS LOCATION ACCESS_FINE_LOCATION ACCESS_COARSE_LOCATION MICROPHONE RECORD_AUDIO PHONE READ_PHONE_STATE CALL_PHONE READ_CALL_LOG WRITE_CALL_LOG ADD_VOICEMAIL USE_SIP PROCESS_OUTGOING_CALLS SENSORS BODY_SENSORS SMS SEND_SMS RECEIVE_SMS READ_SMS RECEIVE_WAP_PUSH RECEIVE_MMS STORAGE READ_EXTERNAL_STORAGE WRITE_EXTERNAL_STORAGE 检查权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果您的应用需要危险权限，则每次执行需要这一权限的操作时，都需要先检查自己是否具有该权限。用户始终可以自由调用该权限，因此即使用户上次同意了使用该权限，下次也不能默认仍有该权限。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要检查应用是否有该权限，需要调用 ContextCompat.checkSelfPermission() 方法。例如：下面这段代码用来检测Activity是否拥有调用相机的权限。 // Assume thisActivity is the current activity int permissionCheck = ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.CAMERA); 如果应用已有此权限，则会返回PackageManager.PERMISSION_GRANTED,并且应用可以继续操作。如果应用不具有此权限，方法将返回 PERMISSION_DENIED，且应用必须明确向用户要求权限。 请求需要的权限&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上一步我们进行了权限的检查，如果当前应用尚未授权该权限，则需要调用一个 requestPermissions()) 方法，以请求适当的权限。此方法是异步执行方法。 if (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) { if (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity, Manifest.permission.READ_CONTACTS)) { //用户引导操作 } else { //权限申请 ActivityCompat.requestPermissions(thisActivity, new String[]{Manifest.permission.READ_CONTACTS}, MY_PERMISSIONS_REQUEST_READ_CONTACTS); } } 确认权限回调&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此步用来判断用户是否确认了权限onRequestPermissionResult () @Override public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) { switch (requestCode) { case MY_PERMISSIONS_REQUEST_READ_CONTACTS: { // 如果结果为空，则用户取消授权 if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) { // 权限申请成功，进行下一步操作 } else { // 权限申请失败，展示相关提示 } return; } } } 第三方工具库 PermissionsDispatcher AndPermission 结语&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是通过6.0之后版本的权限的相关总结，不管你懂没懂，这个工作在日后的开发工作中无可避免，不过如果只是简单的使用，只需要引入第三方工具库即可以非常便利的处理这类问题。","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"收集的好用的软件","date":"2017-04-26T06:05:44.000Z","path":"2017/04/26/develop-apps/","text":"此文章用来记录工作或生活中比较好的软件 列表 Listen 1 Cent浏览器","tags":[]},{"title":"开发资源整理IOS篇（一）","date":"2017-04-25T07:51:40.000Z","path":"2017/04/25/develop-resource-ios-1/","text":"此文章用来记录工作学习中使用或者效果比较好的控件 列表 一个可扩展的Cell 一个下雨的下拉刷新效果 布局 iOS 类似 Instagram 的背景渐变动画效果，很漂亮。 开源项目 可能是最好看的 v2ex iOS 客户端。 iOS 水面波纹效果，酷酷的~","tags":[{"name":"IOS","slug":"IOS","permalink":"http://yoursite.com/tags/IOS/"}]},{"title":"《腾讯传》","date":"2017-04-19T07:16:59.000Z","path":"2017/04/19/book-read-txz/","text":"最近刚读玩吴晓波先生写的《腾讯传》，感触良多。腾讯作为互联网table中的巨头之一，其实大部分八零后、九零后都算是经历见证了腾讯的崛起。我对本书的感受主要一下几点。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、很佩服作者，本书前后总共历时5年，作者通过对腾讯上下各级人员进行了采访记录，可见腾讯和作者对此书的用心程度，个人感觉想对一个公司，尤其是腾讯这类的庞大公司，有一个全面系统深入的了解，还要做出客观（个人认为相对还算客观，其中对其他公司的评价不做评判）的评价，也是十分不易的。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、就是腾讯本身了，其实我个人一直认为，大部分的优秀产品并不是凭空想出来的，而是在公司的发展过程中偶然或是无意中发现的。当然也不是必然的，想乔帮主这样的天才我等凡人还是望尘莫及的。但是腾讯公司确实如此，腾讯成立的时候主打的是BB机，而且是在后BB机时代进入的市场，结果可想而知，幸运的是腾讯QQ的诞生，虽然QQ也是抄袭而来的（QQ的前身产品来自以色列的ICQ），但幸运的是腾讯成功了，并且在加入了自身的特色后发展迅速，成为国内不可替代的通讯工具，也成就了庞大的腾讯帝国。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3、有句话说的好：牛逼的人都是一样的，苦逼的人各有各的苦逼。总结来说，成功的人都会有相同的特质，不管是独到的眼光，超前的思维，马化腾如此，马云如此，周鸿祎也如此。","tags":[{"name":"读书","slug":"读书","permalink":"http://yoursite.com/tags/读书/"}]},{"title":"开发资源整理Android篇（四）","date":"2017-04-14T05:58:36.000Z","path":"2017/04/14/develop-resouce-android-4/","text":"此文章用来记录工作学习中使用或者效果比较好的文章 控件相关 【Android 仿微信通讯录 导航分组列表-上】使用ItemDecoration为RecyclerView打造带悬停头部的分组列表 【Android 仿微信通讯录 导航分组列表-下】自定义View为RecyclerView打造右侧索引导航栏IndexBar 教你步步为营掌握自定义View TextView实战之你真的懂我么？ Android超高仿QQ附近的人搜索展示 Google开源的FlexboxLayout Android自定义控件三部曲文章索引 浅谈Android自定义锁屏页的发车姿势 把RecyclerView撸成 马 蜂 窝 Android自定义控件之TabSelectorLayout(微信tab) 贝塞尔曲线之购物车动画效果 自定义ImageSpan实现简单的文字图片背景效果 Android自定义上下文菜单 一起来写个酷炫的水波纹浪啊浪界面 年终福利-一款实用的图片控件SImageView(第一弹) 快速仿写京东、天猫下拉刷新 Android自定义动画酷炫的提交按钮 DragVideo，一种在播放视频时，可以任意拖拽的方案 五行代码实现 炫动滑动 卡片层叠布局，仿探探、人人影视订阅界面 简单&amp;优雅：LayoutManager+ItemTouchHelper Android Notification常见样式总结 Material Design 之 Behavior 的使用和自定义 Behavior 一些你需要知道的布局优化技巧 仿饿了么加入购物车旋转控件 - 自带闪转腾挪动画 的按钮 Android ViewPager + Fragment 懒加载实现 Android Notification 详解 Android沉浸式状态栏必知必会 关于Android RecyclerView的那些开源LayoutManager Tangram，七巧板，几块简单的积木就能拼出大千世界。 Android Gradle 看这一篇就够了 Android TextureView简易教程 酷炫的Activity切换动画，打造更好的用户体验 网络相关 RxJava+Retrofit+OkHttp 懒人方式使用一 RxJava+Retrofit+OkHttp深入浅出-终极封装二（网络请求） RxJava+Retrofit+OkHttp深入浅出-终极封装三（文件上传） RxJava+Retrofit+OkHttp深入浅出-终极封装四（多文件下载之断点续传） RxJava+Retrofit+OkHttp深入浅出-终极封装五（数据持久化） RxJava+Retrofit+OkHttp深入浅出-终极封装六特殊篇（变种String替换Gson自由扩展） RxJava+Retrofit+OkHttp深入浅出-终极封装七（异常处理） Android App优化之高效网络请求 HTTP协议详解 多线程相关 Java里如何实现线程间通信？ 多媒体 Android Multimedia框架总结（一）MediaPlayer介绍之状态图及生命周期 Android Multimedia框架总结（二）MediaPlayer框架及播放网络视频案例 Android Multimedia框架总结（三）MediaPlayer中创建到setDataSource过程 Android Multimedia框架总结（四）MediaPlayer中从Java层到C++层类关系及prepare及之后其他过程 Android Multimedia框架总结（五）多媒体基础概念 Android Multimedia框架总结（六）C++中MediaPlayer的C/S架构 Android Multimedia框架总结（七）C++中MediaPlayer的C/S架构补充及MediaService介绍 Android Multimedia框架总结（八）Stagefright框架之AwesomePlayer及数据解析器 Android Multimedia框架总结（九）Stagefright框架之数据处理及到OMXCodec过程 Android Multimedia框架总结（十）Stagefright框架之音视频输出过程 Android Multimedia框架总结（十一）CodeC部分之AwesomePlayer到OMX服务 Android Multimedia框架总结（十二）CodeC部分之OMXCodec与OMX事件回调流程 Android Multimedia框架总结（十三）CodeC部分之OpenMAX框架初识及接口与适配层实现 Android Multimedia框架总结（十四）Camera框架初识及自定义相机案例 Android Multimedia框架总结（十五）Camera框架之Camera2补充 Android Multimedia框架总结（十六）Camera2框架之openCamera及session过程 Android Multimedia框架总结（十七）音频开发基础知识 Android存储路径你了解多少？ Android USB 转串口通信开发基本流程 Lottie – 轻松实现动态加载直播礼物动画 资源 移动端开发者福利-免费收费api收藏 工具类之RegexUtils(正则工具类) RestAPP-如何制作app图标以及logo Android内核学习笔记 服务 Android流氓代码块(亲测可行） Android应用进程防杀指南1-常用套路 Android应用进程防杀指南2-双进程守护 Android应用进程防杀指南3-JobService Android Service保活攻防 一种在Java层实现的守护进程方式 Android 进程保活招式大全 Android AIDL跨进程通信 Android Design Android Design Support Library使用 Material Design 之 Toolbar 开发实践总结 Material Design 之 TabLayout 使用 Android resource文件之shape Behavior 实现的漂亮的效果 安全相关 Android proguard 详解 Android 6.0 运行时权限管理最佳实践 Android中的指纹识别 写给Android开发者的混淆使用手册 Android数据加密之Base64编码算法 重磅！Java 内存管理白皮书，读完它，java 内存管理的问题完全 NO Problem！ Android 浮动 Debug 工具箱，直接在浮动窗口执行 Android 测试功能。 正在运行的android程序，按home键之后退回到桌面，再次点击程序图标避免再次重新启动程序解决办法 框架相关 Intro To RxJava 系列教程 总结 RxJava系列 噢~这就是Dagger2！ RxRetrofit - 终极封装 - 深入浅出 &amp; 断点续传 5分钟搞懂Android DeepLink 算法相关 500个数据结构及算法的面试题及答案 源码分析 RecyclerView源码分析 其他 Android录屏命令、Android录Gif、Android录视频 2015 年在微信热传的 100+ 经典技术文章 Android开发者博客汇总 如何正确使用开源项目？ 一周阅读清单 在线小工具推荐 22 个 Android Studio 优秀插件汇总 android framework层源码解析 Diycode每日文章精选 Android 利用 APT 技术在编译期生成代码 微信小程序开发资源 Awesome 大搜集 快速，优雅, 强大的博客系统，由 Laravel5.3 强力驱动。 这些GIT经验够你用一年了 《启示录:如何打造用户喜爱的产品》读书笔记 为Android应用程序读取/dev下设备而提权（一） Andriod-collect-blogs android技术选型(持续更新中…) Python知识架构图 Android Studio编译占cpu99%、100%、编译超慢、卡断问题分析 一个Android开发者为面试准备的知识点总结 如何解决 Android Studio 上远程依赖包重复的问题","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"开发资源整理Android篇（三）","date":"2017-04-14T05:55:47.000Z","path":"2017/04/14/develop-resouce-android-3/","text":"此文章用来记录工作学习中使用或者效果比较好的控件 开源项目 “面对面文件快传”，Android端灵动快传，安卓互传文件，局域网，无网传输文件 一款超漂亮的基于 MD 设计的电影 App 电影天堂第三方App 基于Android的仿微信打飞机游戏 AndroidKeyboard 高仿哔哩哔哩动画安卓客户端 - ( ゜- ゜)つロ 乾杯~ - bilibili 一个Material Design风格的新闻阅读App，采用MVP模式，基于Dagger2+RxJava+Retrofit2进行开发 文件传输项目 极客日报，一款纯粹的阅读App 一个基于 Material Design 风格设计的图书展示类App，豆瓣图书，在线电子书。 任阅” 网络小说阅读器 一个时髦的音乐播放器 「推看」是一款集知乎头条，美图，视频于一体的休闲阅读app。 基于MVP模式开发的带缓存网络爬虫,采用最流行框架搭建,干货多多 AndroidFire，一款新闻阅读 App框架 1、仿泰捷视频最新TV版 Metro UI效果. 2、仿腾讯视频TV版(云视听·极光) 列表页 下一代个人云笔记平台的Android端应用。 PHPHub 是积极向上的 PHP &amp; Laravel 开发者社区. 微影，一款纯粹的在线视频App Unofficial Android client of Eyepetizer(开眼视频). Android TV直播电视节目 ,包含各央视频道及卫视频道 一款基于萌否网站api的音乐管理软件 纸飞机-采用MVP架构，集合了知乎日报、果壳精选和豆瓣一刻的综合性阅读客户端 gank.io kotlin实现的干货集中营Android客户端 MyMy 仿全民TV。 基于模块规模合理采用MVP、MVC 优雅的解耦。 直播播放器(使用模块化开发方式) 基于Rxjava+Retrofit+Okhttp的项目，供大家学习与交流 知乎热门榜 YouDay根据你的名字中日记软件编写开源 「有干货」—— 体验别具一格的 Gank.io Android 客户端 『假装看天气』─── 天气预报 &amp; 公交查询 &amp; 资讯阅读 &amp; 妹纸福利 的 Android 客户端 别踩方块儿游戏 豆瓣Material design风格的客户端 一款优雅的本地音乐播放器 CNode社区非官方客户端 本项目仿最新版微信6.5.7 波尼音乐 EvilsLive 是一个视频直播件开发工具包(SDK), 目前只支持 Android， 以后还会支持 Web/IOS 等平台。 主要负责视频直播的采集、推流、预览、播放、美图支持。 搜罗各种需求，不断完善，有列子支持 一款直接显示App所有信息的App 爱吖妹纸——Retrofit+Rx+MVP架构APP体验，福利多多，不容错过 源码大招：不服来战！撸这些完整项目，你不牛逼都难！ Android DeepLink Demo 实现了：1.从浏览器中打开客户端 2.实现在客户端内部与h5混编","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"开发资源整理Android篇（二）","date":"2017-04-14T03:18:47.000Z","path":"2017/04/14/develop-resouce-android-2/","text":"此文章用来记录工作学习中使用或者效果比较好的控件 多媒体 立志成为Android平台使用最广泛的视频播放控件 sinavideo_playersdk 贴纸标签相机,功能:拍照,相片裁剪,给图片贴贴纸,打标签。 音乐播放控件 VideoView多种显示Style VideoView自定义控制器 一个炫酷的音乐播放Widget android超级视频播放器. 集成android流媒体处理的主流框架，vitamio, ijkplayer等等。使用不同的主流框架实现播放本地视频，网络视频，直播等功能。 Android 屏幕视频录制 通过de Casteljau算法绘制贝塞尔曲线，并计算它的切线，实现1-7阶贝塞尔曲线的形成动画。 Material Camera Android 图片选择器。充分自由定制，极大程度简化使用，支持图库多选/图片预览/单选/照片裁剪/拍照/自定义图片加载方式/自定义色调/沉浸式状态栏 QRCode 扫描二维码、扫描条形码、相册获取图片后识别、生成带 Logo 二维码、支持微博微信 QQ 二维码扫描样式 图片、文件选择 轻松整合相机功能到您的Android应用程序 包含收拾缩放和滑动的FrescoImageViewer 快速，高效，低耗相册选择器，抽取自Telegram，支持单选，多选，预览，缩放，滑动取消预览，QQ选择特性 android视频录制，模仿微视，支持按下录制、抬起暂停。进度条断点显示。 基于VCamera，仿微信录制短视频 视频播放器（IJKplayer），HTTPS支持，支持弹幕，支持基本的拖动，声音、亮度调节等 FingerColoring-Android ExoPlayerView 是一个基于ExoPlayer的视频播放器， 并且做了很多封装. 拍照时在相机的预览界面指定一个区域的大小，形状和位置，只拍摄该指定区域里的图像 Android上专为视频直播打造的轻量级弹幕库（100多kb） android多图选择器 图片/视频 单选or多选，以及视频录制。 一款用于在Android设备上获取照片（拍照或从相册、文件中选择）、裁剪图片、压缩图片的开源工具库 简单的收拾缩放控件 基于MVP模式的Android多媒体选择器。 来疯直播安卓控件，支持flv，支持rtmp，支持添加视频特效等等 选择本地照片或拍照 Luban(鲁班)—可能是最接近微信朋友圈的图片压缩算法 用算法来实现祛斑磨皮，效果很显著呢。 日志 更方便和易用的Android日志管理器 简单，漂亮和强大的Android日志管理 PLog是一个Android专用的日志封装库。 工具 一些有用的工具Tools 判断App位于前台或者后台的6种方法 android下载框架，支持单线程和多线程断点下载。 iteCommon是一系列通用类、辅助类、工具类的集合 囊括了一大部分Android应用开发过程当中常用的工具类。工具类来源整理自网络和自己编写。 本文主要是讲述资源混淆组件的用法以及性能 设备是否Root Android换肤／夜间模式的Android框架，配合theme和换肤控件框架可以做到无缝切换换肤（无需重启应用和当前页面）。 一个易用的后天上传文件库 方便快速的为应用内所有组件更换字体 文件下载 ASimpleCache 是一个为android制定的 轻量级的 开源缓存框架。 基于Android系统Api封装常用工具类 Android 表单验证库，用方法链构建你的验证规则。 通知工具类 拼音搜索工具类 The android tools 自己整理的常用的工具类 Hei 一句代码搞定 Android M 动态权限检测。信不信由你，反正我用了。 CommonLibrary主要是自己整理的一些项目开发中常用的工具类、通用UI的集合，尽可能的覆盖Android开发中通用的一些东西 仿iOS输入法点击输入框以外区域 自动隐藏软键盘轻量级库 Android开发人员不得不收集的代码(持续更新中) 花式二维码生成，提供了6种样式 开发者使用的内存清理、Pss监控工具 快意灵动的提示库,自定义Toast,Snackbar,一行代码搞定多重属性设置! Toast封装 notification工具类,最简化api Android Toast 封装 一个Android图片压缩框架 Android图片压缩框架-Tiny Android指纹识别API兼容库，目前整合了安卓原生API以及 三星 和 魅族 的指纹SDK，支持继续拓展。 Java 实现的漂亮二维码生成工具 动画 一个流畅的Android动画库 一个易用的Android动画库 Android场景切换动画 MaterialAndroid场景切换动画 IndicatorBox 一个3D切换的Card 两步实现类似格瓦拉的转场动画 facebook开源了一个把基于Adobe AE shape的动画转换成json格式并使之能在安卓和iOS上播放的库 Android 动画，兼容2.2 Google地图动画 动画SVG绘制 原生的加载动画 描述你的动画，然后执行它 Android Fragment切换动画 Ramotion 出品：Android 页面展开效果 传感器 传感器封装，简单易用 管理指纹认证的库，支持M之后的版本 这是一个能够让你应用的蓝牙操作(特别是手机通过蓝牙控制物联网智能硬件设备)变得 如此简洁! 一个简单易用的低功耗蓝牙库。操作简单、支持连发无需延时、自带队列管理、支持多通知等、可根据UUID、Name、物理地址过滤扫描。 用rxjava简单封装了指纹识别，顺便撸了一个指纹控件 网络相关 Glide 的图片加载库 Fresco是一个强大的图片加载组件。 一个悬浮窗网速显示计 游戏相关 Android游戏框架 开发框架 Android插件框架，免安装运行插件APK ，支持独立插件和非独立插件 异常捕获框架 其他相关整理 自己总结的Android开源项目及库 Android库 Android不错的UI、UX库 Android 开源项目分类汇总 RootTools 是一款专注于给 root 后的用户提供方便的软件。 正在成为史上最全分类 Android 开源代码大全 主要用于记录微信公众号第一时间所推送的所有文章","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"开发资源整理Android篇（一）","date":"2017-04-13T06:35:36.000Z","path":"2017/04/13/develop-resouce-android/","text":"此文章用来记录工作学习中使用或者效果比较好的控件 Label、输入框 带ICON的EditText 可添加Tag的EditText 一个带平滑切换效果的数字展示控件 滚动播放的公告控件 MarkdownView 支持 SingleLine 模式的标签云效果 Android气泡提示 Android 徽章控件 竖直方向无限循环滚动显示文本的控件 首个字母大写的TextView 俗名：垂直跑马灯；学名：垂直翻页公告。 滚动数字控件 一个带有滚动文字变化动画TextView 一个简单实用的标签控件,轻松添加最新最热等标签 带有徽标(数字，小红点)的按钮 带有徽标(数字，小红点)的按钮 TyperEditText 可展开和收起的TextView 数字增加动画的 TextView 一个可配置的迷你版轻量级 Label 辅助类，支持多种配置效果。 构建HTML标签 Lyricview是一个强大的和灵活的显示歌词控件 定制显示内容的TextView Android 仿小红书图片标签Group 自动切换内容的TextView 一个可以自行定义大部分标签（比如你可以自己定义粗体为 或者 [bold][/bold] 等等），支持LaTeX、图片、代码高亮、表格、引用以及许多文本样式如粗体、斜体、居中、删除线、下划线等的库。 一种支持多种弹幕样式的弹幕视图控件 带有进度动画的Android自定义提交按钮 列表 实现下拉刷新上拉加载的控件 支持addHeaderView、 addFooterView、分页加载的RecyclerView解决方案 一个有趣的下拉刷新效果 打造炫酷列表之 StickyHeaderListView：标题渐变、吸附悬浮、筛选分类、动态头部等 实现HeaderView、FooterView，支持LinerLayoutManager、GridLayoutManager、StaggeredLayoutManager 分组Header悬停效果 分组Header悬停效果 双重分组Header悬停效果 滚动过程中View执行动画 好玩的下拉刷新控件，让我们一起来回味童年 Cell可展开关闭的列表 首个Cell展开的列表 环形显示的RecycleView 流式布局的LayoutManager 复杂列表视图显示 自定义LayoutManager实现一个展示文章的View，支持拖动插入以及相应的动画展示。 Layout动画切换效果 SimpleRecyclerView示例 横向滑动刷新的Layout 可滚动的列表 RecycleView实现的ViewPager、Gallery控件 recyclerview-animators,让你的RecyclerView与众不同 类似于chrome标签浏览器 一个通用的RecyclerView的分割线，支持LinearLayoutManager和GridLayoutManager。只要你能描述清楚每个position上下左右分割线的情况，原则上支持任意LayoutManager 一个可以在加载数据的时候显示闪烁（Shimmer）的 RecyclerView。 时间日期 android高仿钉钉和小米的自定义日历控件（支持阴历和阳历，左右无限翻页viewpager） 示例图片 一个在日历和日程之间提供方便导航的Android项目 示例图片 Android倒计时控件，使用Canvas绘制，支持多种样式 一个交互CalendarView与listview相结合 显示阳历，农历，节假日和二十四节气 实现对某月日期的单选或者多选的andorid 日历控件库。 仿Google的日历控件 图片 一个可以随着设备旋转自动滚动的ImageView 示例图片 根据像素定位锚点的ImageView 示例图片 可以根据图片变颜色，更加细腻的阴影效果 示例图片 图片可移动的ImageView 显示验证码的ImageView 提供的视差效果的ImageView 一个ImageView是类似于QQ的背景图片，图片可以上下移动，但功能比QQ更强大，它也支持左右移动 显示大图，滑动浏览 一个加载高清大图可缩放的图片控件 为图片添加阴影，阴影颜色来源于图片的主色 一个可以按角度切割image的控件。 弹窗 一个强大的Android对话框库,简化自定义对话框.支持2.2+. 谷歌Material Design风格的Dialog，向下兼容到API8 仿iOS的AlertViewController 仿照系统Dialog所写，继承于FrameLayout，添加一些动画，一些显示类型。 一个简单，强大的广告活动弹窗控件 Android PopupWindow，可以很容易地定位 Material Design底部弹窗 顶部消息弹窗 material风格，ios风格，传入context构建，在任意界面弹出，以及dialog样式的activity Android 实现各个方向的气泡弹窗，可控制气泡尖角偏移量。 自定义一些常见的 Dialog 效果，居中显示、顶部显示、仿 IOS 版淘宝、回弹效果、宽度和高度占屏比等 底部弹窗布局，并且支持弹出动画，支持任意布局 加载进度条 守望先锋的加载动画 仿bilibili搜索框效果(三句代码实现) 对PopupWindow常用API的简单封装 菜单 一个实用的多条件筛选菜单 CustomMenu是一个自定义的控件，可以帮助你快速创建Menu 一种简洁的方式实现闸刀展开动画 窗帘侧滑菜单 环形滑动菜单 Material design 更新的BottomNavigationbar的开源实现 android 悬浮窗菜单，可在launcher或app中使用 android 底部导航菜单 完整的筛选器解决方案 简单、灵活、强大的滑动菜单 多达288种动画效果定制的侧滑菜单库 简单的Material弹出菜单 这是一个简单而精致的 Fragment 菜单控件，它可以让你切换 Fragment 的时候不再单调、死板。 一个 DrawerLayout 的扩展,具有帅气的动画与创新的交互。一次手势完成滑出侧边栏与选择菜单。 一个轻巧的分享菜单 可扩展菜单，您可以定义扩展角度和按钮计数等 Android虚拟摇杆 摇杆 方向控制 高仿微信底部状态栏的轻量级库 Floating Action Button扩展定义 ActivitySwitcher 是一个基于 Activity 视图操作管理库，可以实现 Activity 之间任意跳转、关闭任意一个 Activity 以及结束应用程序等功能。 史上最简单侧滑菜单，0耦合，支持任意ViewGroup。一步集成侧滑(删除)菜单，高仿QQ、IOS。~ Android底部导航栏TabBar 可定制选项的多功能Fab组件 一个可以炸开的菜单 一个炫酷的卡片菜单 一个环形扩展菜单 这是一个像DrawerLayout一样的抽屉式的导航库，这个库实现的抽屉在content view的下层，滑动之后，才能看到相应的导航页 一个类似思维导图软件的ViewGroup 模仿Tumblr的弹出式Menu Layout扩展 Android屏幕适配方案，直接填写设计图上的像素尺寸即可完成适配，最大限度解决适配问题。 Android流式布局，支持单选、多选等，适合用于产品标签等。 一个非常简单的弧形Layout 方便的添加各种状态的（加载中、空页面、加载失败） 方便的添加各种状态的（加载中、空页面、加载失败） Google百分比布局库的扩展 滑动关闭Activity Android屏幕适配方案，直接填写设计图上的像素尺寸即可完成适配，最大限度解决适配问题。 A Helper for SystemBar include StatusBar and NavigationBar. 可展开的Layout，节省空间、减少跳转 一个带加载进度的布局 Android九宫格显示多图或item，仿照QQ空间图片列表 高仿最新版微信6.2手势滑动返回 高仿微信视差手势滑动返回库 对角线布局 弧形扩展布局 一个专门为 View 添加阴影效果的库 处理一个两层滑动view的自定义布局，以最少的代码实现，可扩展自定义View~ 一个向左拖拽跳转至更多页面的通用控件 在图像视图底部添加曲线和相对布局。 毛玻璃效果View 在一个页面使用百分比RelativeLayout实现注册、登录 一个强大的表格控件 简单实用的页面多状态布局(content,loading,empty,error) 类似QQ空间，微信朋友圈，微博主页等，展示图片的九宫格控件 一组流动切换按钮，多/单选择支持自定义按钮。 从底部弹出的一个SlideUp 一个帮您快速实现跑马灯效果的library 一个不规则布局组合的Layout Android视图扩散切换控制器 类似Launcher效果的拖拽合并的RecyclerView TabLayout和CoordinatorLayout相结合的折叠控件 一款用心去做的Android 换肤框架, 极低的学习成本, 极好的用户体验. 只需要两行代码, 就可以实现换肤, 你值得拥有!!! 具有共同头部的 ViewPager，支持与ListView，GridView，ScrollView，WebView，RecyclerView 嵌套使用。具有连续的滑动事件 和 滑动监听， 支持下拉刷新。 使读取、编辑和写入CSV文件成为可能的库 模仿微信滑动返回的 Activity 可自定义动画的卡片切换视图 幸运转盘，类似老虎机的抽奖活动效果。 横向堆叠效果的自定义Layout ViewPager 通用的广告栏控件，让你轻松实现广告头效果 滑动卡片集 滑动卡片集 ViewPager的tab 顶部悬停 可横向纵向滑动的Viewpager Banner显示控件 Viewpage内部View切换动画 ViewPagerHeaderScrollDemo ViewPager切换动画 ViewPager导航Tab ViewPager自动、循环滑动 ViewPager,Pager可展开 一个支持四个方向循环滚动的自定义控件 无限循环的双向取向ViewPager和互动的效果。 强大、可定制、易扩展的 ViewPager 指示器框架 RecyclerView实现Card Gallery效果，替代ViewPager方案 Android高仿秒拍热榜的卡片滑动和左右飞出效果，支持保留最后一张卡片 引导页 引导页 轮盘样式的 Fragment 选择菜单，可转动轮盘切换 Fragment 带视差效果的viewpager，为滑动点击添加动画 支持图片无限轮播的BannerLayout 3D翻页效果 A Cool Viewpager ~ 可以展开缩放的Viewpager 一个漂亮的TabLayout 一个漂亮的TabLayout UltraViewPager是一个封装多种特性的ViewPager，主要是为多页面切换场景提供统一解决方案。 横幅广告图片轮播控件 视差效果的 ViewPager 开关 自定义Android开关部件 自定义Android的ToggleButton 动画切换状态的CrossView 自定义switch 和 ruler控件,灵活好用 进度条 显示预览是SeekBar。如在谷歌播放的电影。 仿IOS圆形进度Button 仿IOS的SegmentControl 可用作分部显示、时间轴、订单状态等的控件 仿新浪体育客户端的进度条 图片评级,双图片评级控件，可设置图片间距，支持拖动进度及点击进度，可控制最大值最小值，及是否可手动。 下载进度Button 图表 二维RecycleView Android 自定义View 仪表盘 雷达图，类似支付宝芝麻分解读，王者荣耀对战资料图。 可现实多个属性的线性或区域控件 一个可以自由定制、旋转交互的Android雷达图Lib 速度仪表盘 尺子刻度 AndroidVuMeter SpiderWebScoreView是用于Android上的一个蛛网评分控件 标签 流式Tag标签 流式Label标签 Material Design控件 搜索 搜索 可扩展收缩的ToolBar RatingBar 滑动布局动作 跟随手势滑动，显示隐藏标题栏、底部导航栏及悬浮按钮的Android Behavior Library 选择 滚轮选择控件 一个Android高效日期选择控件，支持（年月日时分星期）等多种模式的控件 安卓选择器类库 加载条 模仿饿了么加载效果 Some loading GIF . 漂亮平滑的加载动画 摄像头 zxing条码扫描视图 用户引导 操作引导层控件 用户指引view 用户指引view Material用户指引view 用户指引提示view 未分类 一个显示数学公式的Library 显示路径或SVG的控件 Android雷达扫描显示效果，模仿QQ附近的人搜索展示 类似刮刮乐的控件 类似刮刮乐的控件 Android点赞+1效果，支持文本和图像 浮动动画显示的按钮 毛玻璃效果 主要针对Android TV，对子元素进行横向排列的Layout CarouselView Android 3D立体无限旋转容器 碎纸机控件 电影票在线选座 可滑动的卡片集 文字、图片加载状态的library 文字、图片加载状态的library 曲线 无限滑动的背景图控件 仿一个斗鱼web端滑动验证码 Android 多边形绘制组件，做的很漂亮哦~ 用来做动态图表会很有帮助，同时可以学习他的实现。 FallingView可以实现碎片飘落效果的控件 一个帮助您完成从缩略图到原图无缝过渡转变的神奇组件","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"}]},{"title":"Android 滚轮选择控件","date":"2016-06-14T08:00:56.000Z","path":"2016/06/14/Android-滚轮选择控件/","text":"序言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近有点闲的过分，想起之前做项目时有用到滚轮选择的控件，也从网上找了许多的开源方案，实现方式也是各式各样，但总感觉不太满意，大部分用到实际项目中的时候都有一定的问题。所以参考了大部分项目之后，准备自定义一个。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此项目可以用来实现时间选择，地址选择等选择的功能（注：项目并不实现联动的逻辑）。 实现方案&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;本项目是通过继承ScrollView来实现滚动选择的。目前的Item只是支持TextView，而且目前并未添加XML样式支持。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ScrollView 相信大家都很熟悉了，此处不再多做介绍。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;给ScrollView添加一个LinearLayout。header为在LinearLayout顶部添加一个空白的布局，这样可以使得首个Item滑动到中间位置。footer同样可以使得末尾Item滑动到中间位置。1234567private void init() &#123; container = new LinearLayout(getContext()); container.setOrientation(LinearLayout.VERTICAL); this.addView(container); header = new View(getContext()); footer = new View(getContext()); &#125; 滚轮滑动控制，通过监听ScrollView的触摸事件来控制滚动选择位置。12345678910111213141516public boolean onTouchEvent(MotionEvent ev) &#123; switch (ev.getAction()) &#123; case MotionEvent.ACTION_UP: postDelayed(new Runnable() &#123; @Override public void run() &#123; int scrollY = getScrollY(); int position = scrollY / itemHeight; position += (scrollY % itemHeight &gt; itemHeight / 2 ? 1 : 0); handler.sendEmptyMessage(position); &#125; &#125;, 100); break; &#125; return super.onTouchEvent(ev); &#125; 为了使滑动过程显得平滑，项目通过监听Scrollview的滑动状态实时进行Item的内容更新。123456789101112131415161718int scrollY = getScrollY(); int position = scrollY / itemHeight; position += (scrollY % itemHeight &gt; itemHeight / 2 ? 1 : 0); int angle = 10 * (scrollY % itemHeight) / itemHeight; if (position != currentPosition) &#123; currentPosition = position; &#125; for (int i = currentPosition - 3; i &lt; currentPosition + 4; i++) &#123; if (i &gt;= 0 &amp;&amp; i &lt; data.size()) &#123; TextView item = (TextView) container.getChildAt(i + 1); if (i != currentPosition) &#123; item.setTextColor(Color.parseColor(\"#666666\")); &#125; else &#123; item.setTextColor(Color.parseColor(\"#FF0000\")); &#125; item.setRotationX(20 * (currentPosition - i) - angle); &#125; &#125; 为了使滚轮滑动效果更为逼真，故在列表滑动的过程中给Item及上下临近的TextView添加一个旋转角度。1item.setRotationX(20 * (currentPosition - i) - angle);","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"控件","slug":"控件","permalink":"http://yoursite.com/tags/控件/"}]},{"title":"Http请求模拟工具","date":"2016-06-12T07:21:02.000Z","path":"2016/06/12/Http请求模拟工具/","text":"简述&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;作为程序猿，我们经常需要和服务器打交道，我们在前端展示的大部分数据都需要从服务器取，而取数据的方式无外乎就是访问服务器给我们提供的接口了。为了调试，我们需要使用工具对接口进行测试，测试达到要求之后才在开发中调用。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这里推荐大家一个个人比较看好的谷歌浏览器插件Postman，Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。 安装&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插件安装地址 https://chrome.google.com/webstore/search/postman?hl=zh-CN （需要科学上网）&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不能科学上网的同学可以直接百度下载Postman插件，直接进行安装 界面样式上图为Postman的界面样式，左侧红色框内为工具栏，可以查看接口请求历史和收藏的常访问的接口。右侧红色框内为请求使用编辑框。 请求示例上图为Postman的请求示例 请求方式为GET请求，URL地址为 https://www.baidu.com/ 并无相关请求参数，请求时间为56ms，请求status为200（即执行成功）,返回结果为Html页面标签 完结&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上即为Postman的一些简单相关介绍。","tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"LoadingView 页面状态切换状态","date":"2016-06-08T07:46:45.000Z","path":"2016/06/08/LoadingView/","text":"序言&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们在做项目页面的过程中，总会遇到页面加载失败，网络异常和数据为空的情况。为了提高用户体验，我们需要针对每一种状态展示相应的状态页面。但是如果在每个页面都添加这样的样式代码，不管是添加还是修改都过于繁琐。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadingView控件实现了一行代码切换状态。 实现原理&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LoadingView 是继承自ViewSwitcher，至于ViewSwitcher的用法。ViewSwitcher适用于两个View视图的切换（可以根据需要添加切换动画）。LoadingView将项目的几种共通状态整合添加为一个View。而将我们正常显示的View作为添加项来定义。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目地址：https://github.com/xudajun/LoadingView/ 使用方法可以使用LoadingView作为页面的根布局（注意LoadingView下只能有一个layout）1234567891011121314151617181920212223&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;com.ivan.library.LoadingView xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/loading\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\" app:icon_empty=\"@mipmap/icon_empty\" app:icon_error=\"@mipmap/icon_net_error\" app:icon_error_net=\"@mipmap/icon_server_error\"&gt; &lt;RelativeLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:layout_centerInParent=\"true\" android:text=\"主页面\" /&gt; &lt;/RelativeLayout&gt;&lt;/com.ivan.library.LoadingView&gt; 状态切换方法1234567891011121314151617181920/*** 加载中*/loading.setLoadingState(LoadingView.LOADING);/*** 加载失败(网络异常)*/loading.setLoadingState(LoadingView.NET_ERROR);/*** 加载出错(服务器或者其他错误)*/loading.setLoadingState(LoadingView.ERROR);/*** 数据为空*/loading.setLoadingState(LoadingView.EMPTY);/*** 加载成功，显示正常布局*/loading.setLoadingState(LoadingView.NORMAL); 效果展示","tags":[{"name":"Android","slug":"Android","permalink":"http://yoursite.com/tags/Android/"},{"name":"控件","slug":"控件","permalink":"http://yoursite.com/tags/控件/"}]},{"title":"序（初篇）","date":"2016-06-08T02:54:28.000Z","path":"2016/06/08/序/","text":"1234人生若只如初见，何事秋风悲画扇。等闲变却故人心，却道故人心易变。骊山语罢清宵半，泪雨霖铃终不怨。何如薄幸锦衣郎，比翼连枝当日愿。 经过查询各种资料，查看各种文档，虽然暂时还没有绑定域名，终于也算是搭建起了属于自己的博客。 自此开始记录自己学习过程和工作中遇到的问题。","tags":[{"name":"随笔","slug":"随笔","permalink":"http://yoursite.com/tags/随笔/"}]}]